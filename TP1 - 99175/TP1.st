Object subclass: #AlgoTrip	instanceVariableNames: 'ciudades viajes hoteles paquete'	classVariableNames: ''	poolDictionaries: ''	category: 'AlgoVTrip'!!AlgoTrip methodsFor: 'Crear' stamp: 'LocaDesquiciada 4/25/2018 09:44'!crearViaje: nombreViaje	| nuevoViaje |		nuevoViaje := Viaje new.	nuevoViaje agregarNombre: nombreViaje.	self guardarViaje: nuevoViaje conNombre: nombreViaje .! !!AlgoTrip methodsFor: 'Obtener' stamp: 'LocaDesquiciada 4/24/2018 00:47'!obtenerCiudad: codCiudad	^( ciudades at: codCiudad )! !!AlgoTrip methodsFor: 'Obtener' stamp: 'LocaDesquiciada 4/25/2018 09:47'!obtenerDuracionEnDiasDelViaje: nombreViaje	| dias |	( viajes includesKey: nombreViaje )		ifTrue: [ dias := (viajes at: nombreViaje) obtenerDiasViaje ].	^dias! !!AlgoTrip methodsFor: 'Obtener' stamp: 'LocaDesquiciada 4/25/2018 10:00'!obtenerCostoDelViaje: nombreViaje	^ ( (viajes at: nombreViaje) calcularCostoViaje )! !!AlgoTrip methodsFor: 'initialization' stamp: 'LocaDesquiciada 4/28/2018 18:19'!initialize	ciudades := 	Dictionary new.	viajes := Dictionary new.	hoteles := Dictionary  new.! !!AlgoTrip methodsFor: 'Otros' stamp: 'LocaDesquiciada 4/27/2018 23:29'!solicitarComidaEspecialAbordoPara: unViaje	| viaje |		( viajes includesKey: unViaje )		ifTrue: [ 			viaje := ( viajes at: unViaje ) agregarPlusComida.		 ].! !!AlgoTrip methodsFor: 'Otros' stamp: 'LocaDesquiciada 4/27/2018 23:25'!vueloDesde: inicio hasta: final	| pais1 pais2 tipoVuelo |		pais1 := inicio obtenerPais.	pais2 := final obtenerPais.		(pais1 = pais2) 		ifTrue: [ tipoVuelo := Domestico new ]		ifFalse: [ tipoVuelo := Internacional new ].			tipoVuelo agregarSalida: inicio yLlegada: final.	^tipoVuelo 	! !!AlgoTrip methodsFor: 'adding elements' stamp: 'LocaDesquiciada 4/26/2018 00:18'!agregarEstadiaEnViaje: nombreViaje enHotel: unHotel desde: inicio hasta: fin	viajes keysDo: [ :key | (key = nombreViaje )		ifTrue: [ 			( hoteles at: unHotel ) agregarCheckIn: inicio  yCheckOut: fin.			( viajes at: key ) agregarHotel: (hoteles at: unHotel).		].	 ].! !!AlgoTrip methodsFor: 'adding elements' stamp: 'LocaDesquiciada 4/28/2018 18:21'!agregarPaquete: nombrePaquete		paquete  := Paquete new.	paquete agregarNombre: nombrePaquete.	! !!AlgoTrip methodsFor: 'adding elements' stamp: 'LocaDesquiciada 4/30/2018 18:50'!agregarVueloEnPaquete: unPaquete de: cod1 a: cod2 enFecha: unaFecha	| nuevoVuelo |		nuevoVuelo := (self vueloDesde: (self obtenerCiudad: cod1) hasta: (self obtenerCiudad: cod2)).	viajes keysDo: [ :tipoViaje |		tipoViaje agregarVuelo: nuevoVuelo enFecha: unaFecha. 		Transcript show: tipoViaje .	].	! !!AlgoTrip methodsFor: 'adding elements' stamp: 'LocaDesquiciada 4/25/2018 21:09'!agregarHotel: unHotel en: unCodCity conPrecioPorNoche: unPrecio	|hotel|		hotel := Hotel new.	hotel inicializarHotel: unHotel en: unCodCity conPrecio: unPrecio.		hoteles at: unHotel put: hotel.	! !!AlgoTrip methodsFor: 'adding elements' stamp: 'LocaDesquiciada 4/23/2018 21:30'!agregarCiudad: unaCiudad dePais: unPais conCodigo: codCiudad latitud: lat longitud: long	| nuevaCiudad |		nuevaCiudad := Ciudad new.	nuevaCiudad inicializar: unaCiudad dePais: unPais conCodigo: codCiudad latitud: lat longitud: long.	(ciudades includesKey: codCiudad )		ifFalse: [ ciudades at: codCiudad put: nuevaCiudad ].	! !!AlgoTrip methodsFor: 'adding elements' stamp: 'LocaDesquiciada 4/25/2018 09:45'!guardarViaje: unViaje conNombre: unNombre		( viajes includesKey: unViaje )		ifFalse: [ viajes at: unNombre put: unViaje]. ! !!AlgoTrip methodsFor: 'adding elements' stamp: 'LocaDesquiciada 4/28/2018 18:09'!agregarEstadiaEnPaquete: nombrePaquete enHotel: unHotel desde: inicio hasta: fin	viajes valuesDo: [ :tipo |		(tipo isKindOf: Paquete) ifTrue:[			(tipo obtenerNombrePaquete = nombrePaquete ) ifTrue: [ 			(hoteles at: unHotel) agregarCheckIn: inicio yCheckOut: fin.			tipo agregarHotel: unHotel.		]]	]! !!AlgoTrip methodsFor: 'adding elements' stamp: 'LocaDesquiciada 4/29/2018 19:31'!agregarAsistenciaAlViajeroAlViaje: unViaje		| viajeActual |	(viajes includesKey: unViaje )		ifTrue: [ 			viajeActual := ( viajes at: unViaje ).			viajeActual agregarAsist.		]	! !!AlgoTrip methodsFor: 'adding elements' stamp: 'LocaDesquiciada 4/29/2018 14:26'!agregarPaquete: nombrePaquete enViaje: nombreViaje		 viajes at: nombreViaje put: paquete 	! !!AlgoTrip methodsFor: 'adding elements' stamp: 'LocaDesquiciada 4/29/2018 13:49'!agregarVueloEnViaje: nombreViaje de: codC1 a: codC2 enFecha: unaFecha	| nuevoVuelo  city1 city2 |	viajes do: [ :viaje | ( viaje obtenerNombreDelViaje = nombreViaje )		ifTrue: [ 			city1 := (self obtenerCiudad: codC1).			city2 := (self obtenerCiudad: codC2).			nuevoVuelo := (self vueloDesde: city1 hasta: city2).			viaje agregarVuelo: nuevoVuelo enFecha: unaFecha.			]	 ].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AlgoTrip class	instanceVariableNames: 'viajes nuevoViaje'!Error subclass: #AlgoTripCiudadNoDisponible	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'AlgoVTrip'!Error subclass: #AlgoTripViajeInexistente	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'AlgoVTrip'!Object subclass: #Asistencia	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'AlgoVTrip'!!Asistencia methodsFor: 'adding elements' stamp: 'LocaDesquiciada 4/27/2018 10:14'!agregarCheckIn: inicio yCheckOut: fin 		noche := Noches new.	noche agregarCheckIn: inicio yCheckOut: fin! !Asistencia subclass: #AsistDeVuelo	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'AlgoVTrip'!!AsistDeVuelo methodsFor: 'calculating' stamp: 'LocaDesquiciada 4/28/2018 01:18'!costoAsistVuelo: unPrecio	^ ( unPrecio * 1.1)! !Asistencia subclass: #AsistHotelera	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'AlgoVTrip'!!AsistHotelera methodsFor: 'calculating' stamp: 'LocaDesquiciada 4/28/2018 01:19'!costoAsistHotelera: diasHotel	^ (30 * diasHotel)! !Object subclass: #Ciudad	instanceVariableNames: 'nCiudad nPais codCiudad lat long'	classVariableNames: ''	poolDictionaries: ''	category: 'AlgoVTrip'!!Ciudad methodsFor: 'accesing' stamp: 'LocaDesquiciada 4/24/2018 01:29'!obtenerLongitud	^long! !!Ciudad methodsFor: 'accesing' stamp: 'LocaDesquiciada 4/24/2018 01:29'!obtenerLatitud	^lat! !!Ciudad methodsFor: 'accesing' stamp: 'LocaDesquiciada 4/24/2018 01:16'!obtenerPais	^nPais! !!Ciudad methodsFor: 'accesing' stamp: 'LocaDesquiciada 4/29/2018 12:44'!obtenerCodigoCiudadCon: latitud y: longitud	( latitud = lat )		ifTru	! !!Ciudad methodsFor: 'initialize' stamp: 'LocaDesquiciada 4/23/2018 21:29'!inicializar: unaCiudad dePais: unPais conCodigo: cCiudad latitud: latitud longitud: longitud		nCiudad := unaCiudad.	nPais := unPais.	codCiudad := cCiudad.	lat := latitud.	long:= longitud.	! !Object subclass: #Hotel	instanceVariableNames: 'nombre precio estadia codigoCiudad nochesTotales'	classVariableNames: ''	poolDictionaries: ''	category: 'AlgoVTrip'!!Hotel methodsFor: 'adding elements' stamp: 'LocaDesquiciada 4/27/2018 23:06'!agregarCheckIn: inicio yCheckOut: fin 		( estadia includesKey: inicio )		ifFalse: [ estadia at: inicio put: fin ]	! !!Hotel methodsFor: 'initialization' stamp: 'LocaDesquiciada 4/27/2018 23:04'!initialize	estadia := Dictionary new.	nochesTotales := 1.! !!Hotel methodsFor: 'initialization' stamp: 'LocaDesquiciada 4/27/2018 23:11'!inicializarHotel: unHotel en: unCodCity conPrecio: unPrecio	nombre := unHotel .	codigoCiudad := unCodCity .	precio := unPrecio.		! !!Hotel methodsFor: 'calculating' stamp: 'LocaDesquiciada 4/25/2018 21:03'!precioHotelTotal	| precioTotal |		precioTotal  := precio * (self cantNochesHotel).		^precioTotal.! !!Hotel methodsFor: 'calculating' stamp: 'LocaDesquiciada 4/28/2018 01:52'!cantNochesHotel	| ultimaNoche |		estadia keysDo: [ :primerNoche |			ultimaNoche := (estadia at: primerNoche ).			nochesTotales := ((ultimaNoche asDate ) - (primerNoche asDate )) days.	].			^ nochesTotales! !Error subclass: #HotelPrecioNegativo	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'AlgoVTrip'!Object subclass: #Viaje	instanceVariableNames: 'nombre costo duracion vuelos plusComida asist hotel aHotelera aVuelo'	classVariableNames: ''	poolDictionaries: ''	category: 'AlgoVTrip'!!Viaje methodsFor: 'initialization' stamp: 'LocaDesquiciada 4/28/2018 18:44'!initialize	costo := 0.	duracion := 0.	plusComida := 0.	asist := false.	hotel := nil.	vuelos := Dictionary new.! !!Viaje methodsFor: 'initialization' stamp: 'LocaDesquiciada 4/29/2018 19:33'!agregarAsist	asist := true.	aHotelera := AsistHotelera new.	aVuelo := AsistDeVuelo new.		! !!Viaje methodsFor: 'adding elements' stamp: 'LocaDesquiciada 4/28/2018 18:51'!agregarVuelo: unVuelo enFecha: unaFecha	( vuelos includesKey: unaFecha )		ifFalse: [ vuelos at: unaFecha put: unVuelo ].! !!Viaje methodsFor: 'adding elements' stamp: 'LocaDesquiciada 4/28/2018 01:54'!agregarHotel: unHotel	hotel := unHotel.! !!Viaje methodsFor: 'adding elements' stamp: 'LocaDesquiciada 4/23/2018 21:21'!agregarNombre: nombreViaje	nombre := nombreViaje.! !!Viaje methodsFor: 'adding elements' stamp: 'LocaDesquiciada 4/27/2018 23:02'!agregarPlusComida	plusComida := 100.		^ plusComida 	! !!Viaje methodsFor: 'calculating' stamp: 'LocaDesquiciada 4/30/2018 17:57'!calcularCostoViaje		vuelos keysDo: [ :key | 		asist 		ifTrue: [  			costo := costo + (aVuelo costoAsistVuelo: ((vuelos at: key) obtenerCostoVuelo)).		]		ifFalse: [ costo := costo + (vuelos at: key) obtenerCostoVuelo ].	].	hotel ifNotNil: [ 		asist	ifTrue: [ 				costo := costo + (aHotelera costoAsistHotelera: (hotel cantNochesHotel) )		].		costo := costo + hotel precioHotelTotal.	].	costo := costo + plusComida.	^ costo! !!Viaje methodsFor: 'accesing' stamp: 'LocaDesquiciada 4/30/2018 20:32'!obtenerCantDeVuelos	^ ((vuelos keys) size).! !!Viaje methodsFor: 'accesing' stamp: 'LocaDesquiciada 4/30/2018 20:33'!obtenerDiasViaje		| f1 f2 |		hotel ifNotNil: [ duracion := hotel cantNochesHotel. 		vuelos ifEmpty: [ duracion := duracion +1 ].	].	vuelos ifNotEmpty: [ 			(self obtenerCantDeVuelos = 2) 				ifTrue: [						f1 := ((vuelos keys) first) asDate.						f2 := (((vuelos keys) last) asDate )addDays: 1.						duracion := (f2 - f1) days.				].			(self obtenerCantDeVuelos = 1)				ifTrue: [ duracion := duracion + 1 ].	].		(duracion < 0) ifTrue: [ ViajeDiasNegativo signal ]. 		^ duracion! !!Viaje methodsFor: 'accesing' stamp: 'LocaDesquiciada 4/24/2018 00:25'!obtenerNombreDelViaje	^nombre! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Viaje class	instanceVariableNames: 'key hotel precioHotel'!Viaje subclass: #Paquete	instanceVariableNames: 'nombrePaquete vuelosP hotelP duracionP costoP plusC'	classVariableNames: ''	poolDictionaries: ''	category: 'AlgoVTrip'!!Paquete methodsFor: 'accesing' stamp: 'LocaDesquiciada 4/28/2018 22:08'!obtenerCantDeVuelos 	^ ((vuelosP keys) size).! !!Paquete methodsFor: 'accesing' stamp: 'LocaDesquiciada 4/30/2018 20:26'!obtenerDiasViaje		"PRE: siempre hay dos vuelos en el paquete."	| f1 f2 |	f1 := ((vuelosP keys) first) asDate.	f2 := (((vuelosP keys) last) asDate) addDays: 1.		duracionP := (f2-f1)days.		(duracionP < 0) ifTrue: [ ViajeDiasNegativo signal ]. 		^duracionP ! !!Paquete methodsFor: 'accesing' stamp: 'LocaDesquiciada 4/28/2018 18:47'!obtenerNombrePaquete	^nombrePaquete ! !!Paquete methodsFor: 'initialization' stamp: 'LocaDesquiciada 4/29/2018 15:16'!initialize	vuelosP := Dictionary new.	hotelP := nil.	costoP := 0.	plusC := 0.! !!Paquete methodsFor: 'initialization' stamp: 'LocaDesquiciada 4/29/2018 14:58'!agregarAsist! !!Paquete methodsFor: 'adding elements' stamp: 'LocaDesquiciada 4/28/2018 18:17'!agregarHotel: unHotel	hotelP := unHotel.! !!Paquete methodsFor: 'adding elements' stamp: 'LocaDesquiciada 4/29/2018 17:32'!agregarVuelo: unVuelo enFecha: unaFecha	 vuelosP at: unaFecha put: unVuelo.! !!Paquete methodsFor: 'adding elements' stamp: 'LocaDesquiciada 4/28/2018 17:45'!agregarNombre: unNombre	nombrePaquete := unNombre.! !!Paquete methodsFor: 'adding elements' stamp: 'LocaDesquiciada 4/29/2018 15:54'!agregarPlusComida	plusC := super agregarPlusComida.! !!Paquete methodsFor: 'calculating' stamp: 'LocaDesquiciada 4/29/2018 16:46'!calcularCostoViaje		hotelP ifNotNil: [ costoP := (costoP + ( hotelP precioHotelTotal ) * 0.8)].	vuelosP ifNotEmpty:[ vuelosP values do: [ :vuelo |		costoP := (costoP + ((vuelo obtenerCostoVuelo) * 0.9)).	]].	costoP := costoP + plusC .	Transcript show: costo.	^ costoP ! !Error subclass: #ViajeDiasNegativo	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'AlgoVTrip'!Object subclass: #Vuelo	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'AlgoVTrip'!!Vuelo methodsFor: 'Obtener' stamp: 'LocaDesquiciada 4/29/2018 14:40'!obtenerCostoVuelo	^ SubclassResponsibility ! !!Vuelo methodsFor: 'Obtener' stamp: 'LocaDesquiciada 4/29/2018 16:25'!obtenerDistanciaEntreCiudades	^ SubclassResponsibility 	! !Vuelo subclass: #Domestico	instanceVariableNames: 'salida llegada'	classVariableNames: ''	poolDictionaries: ''	category: 'AlgoVTrip'!!Domestico methodsFor: 'Obtener' stamp: 'LocaDesquiciada 4/25/2018 19:58'!obtenerCostoVuelo	| distancia costoXkm |		costoXkm := 1.	distancia := (self obtenerDistanciaEntreCiudades) * costoXkm.		^distancia.	! !!Domestico methodsFor: 'Obtener' stamp: 'LocaDesquiciada 4/25/2018 19:56'!obtenerDistanciaEntreCiudades	|lat1 lat2 long1 long2 radioTerrestre distancia |		lat1 := (salida obtenerLatitud) degreesToRadians.	long1 := (salida obtenerLongitud) degreesToRadians.		lat2 := (llegada obtenerLatitud) degreesToRadians.	long2 := (llegada obtenerLongitud) degreesToRadians.		radioTerrestre := 6371.00.   	distancia := 2 * radioTerrestre * 		 (((((((lat2 - lat1) / 2) sin) squared)		 + ((lat1 cos) * (lat2 cos) * 		((((long2 - long1) / 2) sin) squared))) sqrt) arcSin).	^distancia ! !!Domestico methodsFor: 'adding elements' stamp: 'LocaDesquiciada 4/27/2018 23:33'!agregarSalida: inicio yLlegada: final	salida := inicio.	llegada := final.! !Vuelo subclass: #Internacional	instanceVariableNames: 'salida llegada'	classVariableNames: ''	poolDictionaries: ''	category: 'AlgoVTrip'!!Internacional methodsFor: 'Obtener' stamp: 'LocaDesquiciada 4/25/2018 20:02'!obtenerCostoVuelo	| costoXkm distancia imp costoTotal |		imp := 1.05.	costoXkm := 1.5.	distancia := (self obtenerDistanciaEntreCiudades ).	costoTotal := distancia * imp * costoXkm.		^costoTotal! !!Internacional methodsFor: 'Obtener' stamp: 'LocaDesquiciada 4/25/2018 20:01'!obtenerDistanciaEntreCiudades	|lat1 lat2 long1 long2 radioTerrestre distancia |		lat1 := (salida obtenerLatitud) degreesToRadians.	long1 := (salida obtenerLongitud) degreesToRadians.		lat2 := (llegada obtenerLatitud) degreesToRadians.	long2 := (llegada obtenerLongitud) degreesToRadians.		radioTerrestre := 6371.00.   	distancia := 2 * radioTerrestre * 		 (((((((lat2 - lat1) / 2) sin) squared)		 + ((lat1 cos) * (lat2 cos) * 		((((long2 - long1) / 2) sin) squared))) sqrt) arcSin).	^distancia ! !!Internacional methodsFor: 'adding' stamp: 'LocaDesquiciada 4/27/2018 23:27'!agregarSalida: inicio yLlegada: final	salida := inicio.	llegada := final.! !